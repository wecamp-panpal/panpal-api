// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum RecipeCategory {
  APPETIZER
  DESSERT
  MAIN_DISH
  SIDE_DISH
  SOUP
  SAUCE
  DRINK
  SALAD
}

model User {
  id           String   @id @default(uuid())
  email        String   @unique
  passwordHash String   @map("password_hash")
  name         String?
  avatarUrl    String?  @map("avatar_url")
  country      String?
  role         String?  @default("user")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  recipes         Recipe[]
  comments        Comment[]
  ratings         Rating[]  // Keep for backward compatibility, will migrate later
  favorites       Favorite[]
  commentHelpful  CommentHelpful[]
  commentReplies  CommentReply[]

  // Indexes
  @@index([email])
  @@index([createdAt])
  @@map("users")
}

model Recipe {
  id          String         @id @default(uuid())
  title       String
  description String?
  cookingTime String?        @map("cooking_time")
  authorName  String         @map("author_name")
  authorId    String         @map("author_id")
  category    RecipeCategory
  imageUrl    String?        @map("image_url")
  ratingAvg   Float?         @map("rating_avg")
  ratingCount Int?           @map("rating_count")
  createdAt   DateTime       @default(now()) @map("created_at")
  updatedAt   DateTime       @updatedAt @map("updated_at")

  // Relations
  author      User         @relation(fields: [authorId], references: [id])
  ingredients Ingredient[]
  steps       Step[]
  comments    Comment[]
  ratings     Rating[]
  favorites   Favorite[]

  // Indexes for performance
  @@index([category])
  @@index([authorId])
  @@index([title])
  @@index([ratingAvg])
  @@index([createdAt])
  @@index([category, createdAt])
  @@index([title, category])
  @@map("recipes")
}

model Ingredient {
  id       String @id @default(uuid())
  recipeId String @map("recipe_id")
  name     String
  quantity String

  recipe Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@index([recipeId])
  @@map("ingredients")
}

model Step {
  id          String  @id @default(uuid())
  recipeId    String  @map("recipe_id")
  stepNumber  Int     @map("step_number")
  instruction String
  imageUrl    String? @map("image_url") // Added for requirements 2.3

  recipe Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@index([recipeId, stepNumber])
  @@map("steps")
}

model Rating {
  id        String    @id @default(uuid())
  recipeId  String    @map("recipe_id")
  userId    String    @map("user_id")
  score     Int
  imageUrls String[]  @map("image_urls") // For user review images
  comment   String? // User review comment
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at") // Soft delete

  recipe Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([recipeId, userId])
  @@index([recipeId])
  @@index([userId])
  @@index([deletedAt]) // For soft delete queries
  @@map("ratings")
}

model Comment {
  id           String    @id @default(uuid())
  recipeId     String    @map("recipe_id")
  userId       String    @map("user_id")
  content      String
  
  // Optional rating (1-5 stars) - makes this a rating comment
  rating       Int?      // null = regular comment, 1-5 = rating comment
  
  // Images for any comment type
  imageUrls    String[]  @map("image_urls") @default([])
  
  // Engagement metrics
  helpfulCount Int       @default(0) @map("helpful_count")
  
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  deletedAt    DateTime? @map("deleted_at")

  // Relations
  recipe       Recipe    @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  helpfulVotes CommentHelpful[]
  replies      CommentReply[]

  // Note: We'll handle "one rating per user per recipe" constraint in application logic
  // since Prisma unique constraints don't work well with nullable fields
  @@index([recipeId, createdAt])
  @@index([userId])
  @@index([deletedAt])
  @@index([rating]) // For filtering rated vs non-rated comments
  @@index([helpfulCount]) // For sorting by helpful
  @@map("comments")
}

// Track who found which comment helpful
model CommentHelpful {
  id        String   @id @default(uuid())
  commentId String   @map("comment_id")
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")

  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([commentId, userId])
  @@index([commentId])
  @@index([userId])
  @@map("comment_helpful")
}

// Recipe author replies to comments
model CommentReply {
  id        String    @id @default(uuid())
  commentId String    @map("comment_id")
  userId    String    @map("user_id")
  content   String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([commentId])
  @@index([userId])
  @@index([deletedAt])
  @@map("comment_replies")
}

model Favorite {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  recipeId  String   @map("recipe_id")
  createdAt DateTime @default(now()) @map("created_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipe Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@unique([userId, recipeId])
  @@index([userId])
  @@index([recipeId])
  @@map("favorites")
}
