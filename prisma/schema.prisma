// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id          String   @id @default(uuid())
  email       String   @unique
  passwordHash String  @map("password_hash")
  name        String?
  avatarUrl   String?  @map("avatar_url")
  country        String?
  role        String? @default("user") 
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  recipes    Recipe[]
  comments   Comment[]
  ratings    Rating[]
  favorites  Favorite[]
  userRatings UserRatings[] 

  // Indexes
  @@index([email])
  @@index([createdAt])
  @@map("users")
}

model Recipe {
  id          String   @id @default(uuid())
  title       String
  description String?
  cookingTime String?  @map("cooking_time")
  authorName  String   @map("author_name")
  authorId    String   @map("author_id")
  category    String
  imageUrl    String?  @map("image_url")
  ratingAvg   Float?   @map("rating_avg")
  ratingCount Int?     @map("rating_count")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  author      User         @relation(fields: [authorId], references: [id])
  ingredients Ingredient[]
  steps       Step[]
  comments    Comment[]
  ratings     Rating[]
  favorites   Favorite[]

  // Indexes for performance
  @@index([category])
  @@index([authorId])
  @@index([title])
  @@index([ratingAvg])
  @@index([createdAt])
  @@index([category, createdAt])
  @@index([title, category])
  @@map("recipes")
}

model Ingredient {
  id       String @id @default(uuid())
  recipeId String @map("recipe_id")
  name     String
  quantity String

  recipe Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@index([recipeId])
  @@map("ingredients")
}

model Step {
  id          String @id @default(uuid())
  recipeId    String @map("recipe_id")
  stepNumber  Int    @map("step_number")
  instruction String

  recipe Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@index([recipeId, stepNumber])
  @@map("steps")
}

model Rating {
  id        String   @id @default(uuid())
  recipeId  String   @map("recipe_id")
  userId    String   @map("user_id")
  score     Int
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  recipe Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([recipeId, userId])
  @@index([recipeId])
  @@index([userId])
  @@map("ratings")
}

model Comment {
  id        String   @id @default(uuid())
  recipeId  String   @map("recipe_id")
  userId    String   @map("user_id")
  content   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  recipe Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([recipeId, createdAt])
  @@index([userId])
  @@map("comments")
}


model Favorite {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  recipeId  String   @map("recipe_id")
  createdAt DateTime @default(now()) @map("created_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipe Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@unique([userId, recipeId])
  @@index([userId])
  @@index([recipeId])
  @@map("favorites")
}


model UserRatings {
  id         String    @id @default(uuid()) @db.Uuid
  user_id    String    @db.Uuid
  recipe_id  String
  rating     Int       @default(0) // này cũng z thì ý muốn tóm nó lại thành 1 bảng userrating này thui í z
  image_urls String[]
  comment    String? // ý là cái này bà làm bảng riêng nè
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  user   User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  recipe Recipe @relation(fields: [recipe_id], references: [id], onDelete: Cascade)

  @@map("user_ratings")
}
